globleConfigure()
android {
    dataBinding {
        enabled = true
    }
}
dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependencies["annotations"]
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["design"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    api rootProject.ext.dependencies["glide"]
    api rootProject.ext.dependencies["avi-loading"]
    api rootProject.ext.dependencies["rxpermissions"]
    api rootProject.ext.dependencies["rxbinding"]
    api rootProject.ext.dependencies["bottomsheet"]
    api rootProject.ext.dependencies["statusbarlib"]
    api rootProject.ext.dependencies['qybanner']

    debugImplementation rootProject.ext.dependencies["leakcanary-canary-debug"]
    releaseImplementation rootProject.ext.dependencies["leakcanary-canary-release"]

    implementation(rootProject.ext.dependencies['okhttp3-integration']) {
        exclude group: 'glide-parent'
    }


    dependencies.getProperties()
    api project(':rx_lib')
    api project(':net_library')
    api project(':tinker_lib')
    api project(':utils_lib')
    api project(':theme_lib')
    api project(':recycler_lib')


}
def s = ['androidTestApi','androidTestAnnotationProcessor','androidTestCompile','androidTestCompileOnly','androidTestDebugAnnotationProcessor',
'androidTestDebugApi','androidTestDebugCompile','androidTestDebugCompileOnly','androidTestDebugImplementation','androidTestDebugProvided',
'androidTestDebugPublish','androidTestDebugRuntimeOnly','androidTestDebugWearApp','androidTestImplementation','androidTestProvided',
'androidTestPublish','androidTestRuntimeOnly','androidTestWearApp','annotationProcessor','api']
//task uploadBatch{
//   def projectSet = rootProject.allprojects
//    println "================== " + projectSet
//
//    Properties properties = new Properties()
//    InputStream inputStream = rootProject.file(MAVEN_CONFIG_PATH).newDataInputStream()
//    properties.load(inputStream)
//
//    def map = [:]
//
//    projectSet.each{
//        println "================== " + it
//        it.name
//        properties.containsKey()
//        map.put()
//    }
//    map.each { key, value ->
//        def moduleProject = rootProject.childProjects.get(key)
//        moduleProject.configurations.all {
//
//        }
//
//    }}
//
//
